name: CI/CD
run-name: CI/CD triggered by @${{ github.actor }}

on: 
  push:
    paths: 
      - 'frontend/**'
      - 'backend/**'
      - 'infrastructure/**'

#  ToDo: force deploy jobs to be executed after linting  
jobs:
  detect_changes:
      runs-on: ubuntu-latest
      outputs:
        backend: ${{ steps.changes.outputs.backend }}
        frontend: ${{ steps.changes.outputs.frontend }}
        infrastructure: ${{ steps.changes.outputs.infrastructure }}
      steps:
        - uses: actions/checkout@v3
        - uses: dorny/paths-filter@v2
          id: changes
          with:
            base: ${{ github.ref }} 
            filters: |
              frontend:
                - 'frontend/**'
              backend:
                - 'backend/**'
              infrastructure:
                - 'infrastructure/**'
            
  lint_frontend:
      name: lint frontend
      needs: detect_changes
      if: ${{ needs.detect_changes.outputs.frontend == 'true' }}
      runs-on: ubuntu-latest
      defaults:
          run:
              working-directory: ./frontend
      steps:        
          - name: Checkout code
            uses: actions/checkout@v3

          - name: Echo job and branchname
            run: echo "Running ${{ github.job }} on ${{ github.ref }}"

          - name: set up python
            uses: actions/setup-python@v2
            with:
              python-version: '3.10'

          - name: install dependencies
            run: |
              python -m pip install --upgrade pip
              pip install -r requirements.txt

          - name: lint with black
            uses: psf/black@stable
            
          - name: lint with ruff
            uses: chartboost/ruff-action@v1

  lint_backend:
      name: lint backend
      needs: detect_changes
      if: ${{ needs.detect_changes.outputs.backend == 'true' }}
      runs-on: ubuntu-latest
      defaults:
        run:
          working-directory: ./backend
      steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Echo job and branchname
          run: echo "Running ${{ github.job }} on ${{ github.ref }}"

        - name: Set up python
          uses: actions/setup-python@v2
          with:
            python-version: '3.10'

        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install -r requirements.txt

        - name: lint with black
          uses: psf/black@stable
        
        - name: lint with ruff
          uses: chartboost/ruff-action@v1          
                      
  setup_backend_infrastructure:
      name: setup backend infrastructure
      needs: detect_changes
      if: |
          github.ref_name == '47-deploy-fastapi-backend-to-aws-using-pulumi' && 
          needs.detect_changes.outputs.infrastructure == 'true'
      runs-on: ubuntu-latest
      outputs:
        ec2_ip: ${{ steps.pulumi.outputs.instance_public_ip }}
        old_ip: ${{ steps.pulumi.outputs.old_instance_ip }}
      defaults:
        run:
          working-directory: ./infrastructure
      steps:
        - uses: actions/checkout@v3
        - name: Set up python
          uses: actions/setup-python@v2
          with:
            python-version: '3.10'
        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-region: ${{ secrets.AWS_REGION }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install -r requirements.txt
        - name: Set-up stack
          id: pulumi
          uses: pulumi/actions@v3
          with:
            command: up
            stack-name: mt7180/quaigle_backend/dev
            work-dir: ./infrastructure
          env:
            PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
            APP_NAME :  ${{ github.repository }}
            GIT_USER : ${{ github.actor }}
        - run: echo ${{ steps.pulumi.outputs.instance_public_ip }} > backend_public_ip.txt
        - name: Upload ec2 public ip to artifact
          uses: actions/upload-artifact@v3
          with:
            name: backend_public_ip
            path: ./infrastructure/backend_public_ip.txt

  Provide_frontend_with_new_backend_url:
    name: Modify frontend Dockerfile
    needs: setup_backend_infrastructure
    if: |
        needs.setup_backend_infrastructure.outputs.old_ip != needs.setup_backend_infrastructure.outputs.ec2_ip &&
        github.ref_name == '47-deploy-fastapi-backend-to-aws-using-pulumi'
    runs-on: ubuntu-latest
    steps:
        - uses: actions/checkout@v2
          with:
            persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal access token.
            fetch-depth: 0 # otherwise, there would be errors pushing refs to the destination repository.
        - name: Give new backend-url to frontend
          id: transfer_backend_url
          working-directory: ./frontend
          run: |
            echo "new content"
            echo ${{ needs.setup_backend_infrastructure.outputs.ec2_ip }}

        # ToDO: uncomment as next step to set backend url in frontend Dockerfile
        #   python rewrite_frontend_dockerfile(${{ steps.pulumi.outputs.instance_public_ip }})
        # - name: commit Dockerfile
        #   if: ${{ steps.transfer_backend_url == 'true'}}
        #   working-directory: .frontend
        #   run: |
        #     git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        #     git config --local user.name "github-actions[bot]"
        #     git add .Dockerfile
        #     git commit -m "automatic update of backend url in frontend Dockerfile"
        # - name: push changes
        #   uses: ad-m/github-push-action@master
        #   with:
        #     github_token: ${{ secrets.GITHUB_TOKEN }}
        #     branch: ${{ github.ref }}

  build_backend_image:
    name: build backend image and push to ghcr
    needs: detect_changes
    if: |
        github.ref_name == '47-deploy-fastapi-backend-to-aws-using-pulumi' && 
        needs.detect_changes.outputs.backend == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v3
      - name: Build and push image to GHCR
        run: |
          docker login --username ${{ github.actor }} --password ${{ secrets.GH_PAT}} ghcr.io
          docker build . -t ghcr.io/${{ github.repository }}_backend_container:latest
          docker push ghcr.io/${{ github.repository }}_backend_container:latest

  deploy_backend_container:
    name: deploy backend
    needs: [detect_changes, build_backend_image, setup_backend_infrastructure]
    # always() can not be canceled, but the job needs to be run even if the preceeding jobs
    # defined in needs: are skipped (== canceled()). On the other
    # hand the job has to wait for the jobs defined in need: to have infrastructure and docker image prepared
    if: |
        always() && 
        github.ref_name == '47-deploy-fastapi-backend-to-aws-using-pulumi' && 
        (needs.detect_changes.outputs.backend == 'true' || needs.detect_changes.outputs.infrastructure == 'true') &&
        (needs.setup_backend_infrastructure.result == 'success' || needs.setup_backend_infrastructure.result == 'skipped') &&
        (needs.build_backend_image.result == 'success' || needs.build_backend_image.result == 'skipped')
       
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Download ec2 IP from artifact
        id: get_backend_ip
        uses: actions/download-artifact@v2
        with:
          name: backend_public_ip
          path: ./infrastructure
      - name: Export ec2 IP to env variable
        run: echo "ec2_inst_id=$(cat ./infrastructure/backend_public_ip.txt)" >> $GITHUB_ENV
      # plain ping doesn't work with gh actions, is there a runner?
      # - name: Check if IP works and ec2 is up
      #   id: ping
      #   run: ping -c 1 -w 300 -i 30 ${{ env.ec2_inst_id  }}
        
      - name: SSH into ec2 and pull current docker image
        env:
            PRIVATE_KEY: ${{ secrets.EC2_KEY  }}
            # PRIVATE_KEY_NAME: ${{ secrets.EC2_KEY_NAME}}
            HOSTNAME : ${{ env.ec2_inst_id  }}
            USER_NAME : ${{ secrets.EC2_USER  }}
            AWS_REGION : ${{ secrets.AWS_REGION }}
            APP_NAME :  ${{ github.repository }}
        # https://blog.devops.dev/continuous-deployment-with-github-actions-dockerhub-and-aws-ec2-a-hands-on-tutorial-b01656a27963    
        # https://farhan-tanvir.medium.com/ci-cd-from-github-to-aws-ec2-using-github-action-e18b621c0507
        # https://github.com/jonashackt/pulumi-python-aws-ansible/blob/master/README.md#ssh-connection-to-the-pulumi-created-ec2-instance
        # 

        run: |
          echo "${{ env.PRIVATE_KEY }}" > key && chmod 600 key
          ssh -o StrictHostKeyChecking=no -i key ${{ env.USER_NAME }}@${{ env.HOSTNAME }} '
            sudo docker login --username ${{ github.actor }} --password ${{ secrets.GH_PAT }} ghcr.io &&
            sudo docker image rm ghcr.io/${{ github.repository }}_backend_container --force
            sudo docker run -d -p 8000:8000 ghcr.io/${{ github.repository }}_backend_container:latest
          '

  deploy_frontend:
    name: deploy frontend
    needs: detect_changes
    if: ${{ github.ref == 'refs/heads/main' && needs.detect_changes.outputs.frontend == 'true' }}
    runs-on: ubuntu-latest
    defaults:
        run:
            working-directory: ./frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Echo job and branchname
        run: echo "Running ${{ github.job}} on ${{ github.ref }}"

      - name: Set up flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy on fly
        run: flyctl deploy --remote-only
        env:
            FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

